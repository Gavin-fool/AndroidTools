apply plugin: 'com.android.library'
apply plugin: 'maven'
//apply plugin: 'realm-android'

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.2'
    // resourcePrefix 'mpcht'
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 3
        versionName '3.0.2'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true // this prevents "not mocked" error
    }
    productFlavors {
    }
}

repositories {
    maven {
        url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
    }
}

dependencies {
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    //compile 'com.android.support:support-v4:19.+'
    //provided 'io.realm:realm-android:0.87.5' // "optional" dependency to realm-database API
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
//    compile 'com.android.support:appcompat-v7:24.2.1'
//    compile 'com.android.support:design:24.2.1'
//    compile 'com.android.support:recyclerview-v7:24.2.1'
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    options.charSet = 'UTF-8'
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//Copy类型
task makeJar(type: Copy) {
    //删除存在的
    delete 'build/libs/MPAndroidChart.jar'
    //设置拷贝的文件
    from('build/intermediates/bundles/release/')
    //打进jar包后的文件目录
    into('build/libs/')
    //将classes.jar放入build/libs/目录下
    //include ,exclude参数来设置过滤
    //（我们只关心classes.jar这个文件）
    include('classes.jar')
    //重命名
    rename ('classes.jar', 'MPAndroidChart.jar')
}

makeJar.dependsOn(build)
//在终端执行生成JAR包
// gradlew makeJar
